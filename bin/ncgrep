#!/bin/env python

import sys
import argparse
import time, datetime
import tempfile
import re
import os

import argparse_extensions

# set up command line args
argparser = argparse.ArgumentParser()
argparser.add_argument('file', nargs='?', type=argparse.FileType('r'), default=sys.stdin, metavar='<filename>', help='def= stdin')
argparser.add_argument('-ofile', type=argparse.FileType('w'), default=sys.stdout, metavar='<outputfile>', help='def= stdout')
argparser.add_argument('-last', nargs='?', type=int, default=0, const=1, metavar='<N>', help='last N cycles: def= all')
argparser.add_argument('-first', nargs='?', type=int, default=0, const=1, metavar='<N>', help='first N cycles: def= all')
argparser.add_argument('-e', default=[], action='append', metavar='<regexp>', help='cycles matching regexp (like grep -e)')
argparser.add_argument('-since', type=argparse_extensions.time_spec, default=None, metavar='<time-expr>', help='ex: "1294696760", "10 min ago", "1h", "2010/12/31", "2010/12/31 15:30:00"')
argparser.add_argument('-until', type=argparse_extensions.time_spec, default=None, metavar='<time-expr>')
argparser.add_argument('-timestamp-format', default="%m/%d/%y %H:%M:%S", metavar='<fmt>', help='def="%%m/%%d/%%y %%H:%%M:%%S"')

# parse command line
args = argparser.parse_args()

tsflds = len(args.timestamp_format.strip().split(' '))

in_cycle = False
end_cycle = False
e_match = False
matching_files = []
cycle_lines = 0
cycle_failed = False
until_failed = False
reuse_ncfile = False
ncfile = None

for line in args.file:
    # if user specified -until, and we hit a cycle that failed, we can halt
    # since remaining cycles all come even later in time and will also fail
    if until_failed: break

    if not in_cycle and "Started Negotiation" in line:
        in_cycle = True
        if not reuse_ncfile:
            ncfilename = tempfile.mktemp(prefix="ncgrep_")
            ncfile = open(ncfilename, "w")
        cycle_lines = 0
        e_match = (len(args.e) <= 0)
        since_match = (args.since is None)
        until_match = (args.until is None)
        cycle_failed = False
    elif "Finished Negotiation" in line:
        end_cycle = True
    
    # if we're between cycles, continue to next line
    if not in_cycle: continue

    cycle_lines += 1

    # if we can eliminate this cycle early, skip expensive checks
    # (last line in cycle requires going through entire iteration)
    if cycle_failed and not end_cycle: continue

    # save the line to current cycle file
    ncfile.write(line)

    # timestamp
    flds = line.strip().split(' ')
    timestamp = int(time.mktime(time.strptime(' '.join(flds[:tsflds]), args.timestamp_format)))

    # test since and until
    if (cycle_lines <= 1) and (args.since is not None):
        if timestamp >= args.since:
            since_match = True
        else:
            cycle_failed = True
    if (end_cycle) and (args.until is not None):
        if timestamp <= args.until:
            until_match = True
        else:
            cycle_failed = True
            until_failed = True

    # test '-e' patterns
    if not e_match and (len(args.e) > 0):
        for regexp in args.e:
            e_match = (re.search(regexp, line) is not None)
            if e_match: break

    if end_cycle:
        in_cycle = False
        end_cycle = False
        # test whether cycle matched all conditions
        cycle_match = e_match and since_match and until_match
        # only save cycles that matched all the given conditions
        if cycle_match:
            ncfile.close()
            matching_files.append(ncfilename)
            reuse_ncfile = False
        else:
            # cycle didn't match, so we can reuse file and overwrite its data
            ncfile.seek(0)
            reuse_ncfile = True


# Get the first/last subset of matching files
t = args.first + args.last
if (t <= 0) or (t >= len(matching_files)):
    # if both were defaulted, or both add up to >= number of matching files, 
    # then select everything
    onames = matching_files[:]
else:
    onames = []
    if args.first > 0: onames += matching_files[:args.first]
    if args.last > 0: onames += matching_files[-args.last:]


# dump the cycles that matched criteria to the output file
for fname in onames:
    f = open(fname, "r")
    for ln in f: args.ofile.write(ln)
    f.close()
    os.remove(fname)

# clean up dangling temp file
if (ncfile is not None):
    ncfile.close()
if (ncfilename is not None) and (os.path.exists(ncfilename)):
    os.remove(ncfilename)
