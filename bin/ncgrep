#!/bin/env python

import sys
import argparse
import time, datetime
import tempfile
import re
import os

import argparse_extensions

# set up command line args
argparser = argparse.ArgumentParser()
grp = argparser.add_argument_group('I/O')
grp.add_argument('file', nargs='?', type=argparse.FileType('r'), default=sys.stdin, metavar='<filename>', help='def= stdin')
grp.add_argument('-ofile', type=argparse.FileType('w'), default=sys.stdout, metavar='<outputfile>', help='def= stdout')

grp = argparser.add_argument_group('First/Last Subsets')
grp.add_argument('-first', nargs='?', type=int, default=0, const=1, metavar='<N>', help='select first N matching cycles: N def= 1')
grp.add_argument('-last', nargs='?', type=int, default=0, const=1, metavar='<N>', help='select last N matching cycles:  N def= 1')

grp = argparser.add_argument_group('Regular Expressions')
grp.add_argument('-e', default=[], action='append', metavar='<regexp>', help='select cycles with >= 1 line matching regexp (like grep -e)')

grp = argparser.add_argument_group('Time Selection')
grp.add_argument('-since', type=argparse_extensions.time_spec, default=None, metavar='<time-expr>', help='select cycles since given time. ex: "1294696760", "10 min ago", "1h", "2010/12/31", "2010/12/31 15:30:00"')
grp.add_argument('-until', type=argparse_extensions.time_spec, default=None, metavar='<time-expr>', help='select cycles until given time.  see -since')

grp = argparser.add_argument_group('Accounting Groups')
grp.add_argument('-group-negotiated', metavar='<regexp>', help='select cycles when group matching <regexp> negotiated')
grp.add_argument('-group-matched', metavar='<regexp>', help='select cycles when group matching <regexp> matched a job')
grp.add_argument('-group-rejected', metavar='<regexp>', help='select cycles when group matching <regexp> was rejected')

grp = argparser.add_argument_group('Submitters')
grp.add_argument('-submitter-negotiated', metavar='<regexp>', help='select cycles when submitter matching <regexp> negotiated')
grp.add_argument('-submitter-matched', metavar='<regexp>', help='select cycles when submitter matching <regexp> matched a job')
grp.add_argument('-submitter-rejected', metavar='<regexp>', help='select cycles when submitter matching <regexp> was rejected')

grp = argparser.add_argument_group('Job Clusters')
grp.add_argument('-cluster-negotiated', type=int, metavar='<N>', help='select cycles when cluster <N> negotiated')
grp.add_argument('-cluster-matched', type=int, metavar='<N>', help='select cycles when cluster <N> matched')
grp.add_argument('-cluster-rejected', type=int, metavar='<N>', help='select cycles when cluster <N> was rejected')

grp = argparser.add_argument_group('Job IDs')
grp.add_argument('-job-negotiated', type=argparse_extensions.job_id, metavar='<N.M>', help='select cycles when job <N.M> negotiated')
grp.add_argument('-job-matched', type=argparse_extensions.job_id, metavar='<N.M>', help='select cycles when job <N.M> matched')
grp.add_argument('-job-rejected', type=argparse_extensions.job_id, metavar='<N.M>', help='select cycles when job <N.M> was rejected')

grp = argparser.add_argument_group('Formats')
grp.add_argument('-timestamp-format', default="%m/%d/%y %H:%M:%S", metavar='<fmt>', help='log timestamp format: def="%%m/%%d/%%y %%H:%%M:%%S"')

# parse command line
args = argparser.parse_args()

tsflds = len(args.timestamp_format.strip().split(' '))

in_cycle = False
end_cycle = False
e_match = False
matching_files = {}
cycle_lines = 0
cycle_failed = False
reuse_ncfile = False
ncfile = None
current_group = ""
current_submitter = ""
cycle_timestamp = 0

for line in args.file:
    if not in_cycle and "Started Negotiation" in line:
        in_cycle = True
        if not reuse_ncfile:
            ncfilename = tempfile.mktemp(prefix="ncgrep_")
            ncfile = open(ncfilename, "w")
        cycle_lines = 0
        e_match = (len(args.e) <= 0)

        since_match = (args.since is None)
        until_match = (args.until is None)

        group_negotiated_match = (args.group_negotiated is None)
        submitter_negotiated_match = (args.submitter_negotiated is None)
        cluster_negotiated_match = (args.cluster_negotiated is None)
        job_negotiated_match = (args.job_negotiated is None)

        group_matched_match = (args.group_matched is None)
        submitter_matched_match = (args.submitter_matched is None)
        cluster_matched_match = (args.cluster_matched is None)
        job_matched_match = (args.job_matched is None)

        group_rejected_match = (args.group_rejected is None)
        submitter_rejected_match = (args.submitter_rejected is None)
        cluster_rejected_match = (args.cluster_rejected is None)
        job_rejected_match = (args.job_rejected is None)

        cycle_failed = False
        current_group = ""
        current_submitter = ""
    elif in_cycle and "Finished Negotiation" in line:
        end_cycle = True
    
    # if we're between cycles, continue to next line
    if not in_cycle: continue

    cycle_lines += 1
    begin_cycle = (cycle_lines <= 1)

    # if we can eliminate this cycle early, skip expensive checks
    # (last line in cycle requires going through entire iteration)
    if cycle_failed and not end_cycle: continue

    # save the line to current cycle file
    ncfile.write(line)

    if begin_cycle or end_cycle:
        # timestamp
        flds = line.strip().split()
        timestamp = int(time.mktime(time.strptime(' '.join(flds[:tsflds]), args.timestamp_format)))
        if begin_cycle: cycle_timestamp = timestamp

        # test since and until
        if begin_cycle and args.since is not None:
            since_match = (timestamp >= args.since)
            cycle_failed = not since_match
        if end_cycle and args.until is not None:
            until_match = (timestamp <= args.until)
            cycle_failed = not until_match

    # test '-e' patterns
    if not e_match:
        for regexp in args.e:
            e_match = (re.search(regexp, line) is not None)
            if e_match: break

    # detect update of current group
    if "BEGIN NEGOTIATION" in line:
        m = re.search('Group\s+(\S+)', line)
        if m is not None:
            current_group = m.group(1)
            current_submitter = ""

    # detect update of current submitter
    if (current_group != "") and re.search("Negotiating with.* at ", line):
        m = re.search('with\s+(\S+@\S+)\s+at', line)
        if m is not None:
            current_submitter = m.group(1)

    # reset current group and submitter
    if "negotiateWithGroup resources used" in line:
        current_submitter = ""
        current_group = ""

    # test group and submitter selections
    if (not group_negotiated_match) and (current_group != "") and re.search(args.group_negotiated, current_group):
        group_negotiated_match = True
    if (not submitter_negotiated_match) and (current_submitter != "") and re.search(args.submitter_negotiated, current_submitter):
        submitter_negotiated_match = True

    if (not group_matched_match) and (current_group != "") and re.search(args.group_matched, current_group) and \
            ('Successfully matched with' in line):
        group_matched_match = True
    if (not submitter_matched_match) and (current_submitter != "") and re.search(args.submitter_matched, current_submitter) and \
            ('Successfully matched with' in line):
        submitter_matched_match = True

    if (not group_rejected_match) and (current_group != "") and re.search(args.group_rejected, current_group) and \
            re.search('Rejected.*no match found', line):
        group_rejected_match = True
    if (not submitter_rejected_match) and (current_submitter != "") and re.search(args.submitter_rejected, current_submitter) and \
            re.search('Rejected.*no match found', line):
        submitter_rejected_match = True

    # test cluster and job related selections
    if not cluster_negotiated_match:
        m = re.search('Request (\d+)\.\d+:', line)
        if (m is not None) and (int(m.group(1)) == args.cluster_negotiated):
            cluster_negotiated_match = True
    if not job_negotiated_match:
        m = re.search('Request (\d+)\.(\d+):', line)
        if (m is not None) and ((int(m.group(1)),int(m.group(2))) == args.job_negotiated):
            job_negotiated_match = True

    if not cluster_matched_match:
        m = re.search('Matched (\d+)\.\d+ ', line)
        if (m is not None) and (int(m.group(1)) == args.cluster_matched):
            cluster_matched_match = True
    if not job_matched_match:
        m = re.search('Matched (\d+)\.(\d+) ', line)
        if (m is not None) and ((int(m.group(1)),int(m.group(2))) == args.job_matched):
            job_matched_match = True

    if not cluster_rejected_match:
        m = re.search('Rejected (\d+)\.\d+ ', line)
        if (m is not None) and (int(m.group(1)) == args.cluster_rejected):
            cluster_rejected_match = True
    if not job_rejected_match:
        m = re.search('Rejected (\d+)\.(\d+) ', line)
        if (m is not None) and ((int(m.group(1)),int(m.group(2))) == args.job_rejected):
            job_rejected_match = True

    if end_cycle:
        in_cycle = False
        end_cycle = False
        # test whether cycle matched all conditions
        cycle_match = e_match and since_match and until_match and \
            group_negotiated_match and submitter_negotiated_match and \
            group_matched_match and submitter_matched_match and \
            group_rejected_match and submitter_rejected_match and \
            cluster_negotiated_match and job_negotiated_match and \
            cluster_matched_match and job_matched_match and \
            cluster_rejected_match and job_rejected_match
        # only save cycles that matched all the given conditions
        if cycle_match:
            ncfile.truncate()
            ncfile.close()
            matching_files[cycle_timestamp] = ncfilename
            reuse_ncfile = False
        else:
            # cycle didn't match, so we can reuse file and overwrite its data
            ncfile.seek(0)
            reuse_ncfile = True


# convert matching files into an array for subsequent handling
ts = matching_files.keys()
ts.sort()
matching_files = [matching_files[t] for t in ts]

# Get the first/last subset of matching files
t = args.first + args.last
if (t <= 0) or (t >= len(matching_files)):
    # if both were defaulted, or both add up to >= number of matching files, 
    # then select everything
    onames = matching_files[:]
else:
    onames = []
    if args.first > 0: onames += matching_files[:args.first]
    if args.last > 0: onames += matching_files[-args.last:]


# dump the cycles that matched criteria to the output file
for fname in onames:
    f = open(fname, "r")
    for ln in f: args.ofile.write(ln)
    f.close()

# remove all matching files after we are finished with them
for fname in matching_files:
    os.remove(fname)

# clean up dangling temp file
if (ncfile is not None):
    ncfile.close()
if (ncfilename is not None) and (os.path.exists(ncfilename)):
    os.remove(ncfilename)
