#!/usr/bin/python


import sys, os, os.path, string, glob, math
import random
import time, datetime
import tempfile
import subprocess
import matplotlib.pyplot as pyplot
import numpy


def usage(a):
    aa = a
    j = aa.rfind('/')
    if j>=0: aa = aa[1+j:] 
    sys.stderr.write("usage: %s [options]\n" % (aa))
    sys.stderr.write("       [ -f <history-file> ] (def = active condor history file)\n")
    sys.stderr.write("       [ -by <expr> ] (categories by value of <expr>)\n")
    sys.stderr.write("       [ -by-group ] (categories by accounting groups)\n")
    sys.stderr.write("       [ -by-submitter ] (categories by full submitter names)\n")
    sys.stderr.write("       [ -cum ] (cumulative plots)\n")
    sys.stderr.write("       [ -ratios ] (plot ratios relative to total values)\n")
    sys.stderr.write("       [ -timeslice <time-res> ] (default = 1 sec)\n")
    sys.stderr.write("       [ -ignore <cat1> [ <cat2> ...]] (ignore data from categories)\n")
    sys.stderr.write("       [ -only <cat1> [ <cat2> ...]] (consider only data from categories)\n")
    sys.stderr.write("       [ -with-total ] (include total in plot)\n")
    sys.stderr.write("       [ -only-total ] (show only the total in plot)\n")
    sys.stderr.write("       [ -constraint <expr> ] (constrain output of condor_history with constraint-expr)\n")
    sys.exit(1)

argv = sys.argv
argc = len(argv)

fixedArgs = 0
if argc <= fixedArgs: usage(argv[0])

# fixed args

# option defaults
in_fname = None
by_expr = None
by_groups = False
by_submitters = False
cum_plots = False
ratio_plots = False
timeslice = 1
ignore = []
only = []
with_total = False
only_total = False
constraint = None

# options
try:
    j = fixedArgs+1
    while j<argc:
        if sys.argv[j]=="-h": usage()
        if sys.argv[j]=="-f":
            j+=1
            if j>=argc: usage(sys.argv[0])
            in_fname = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-by":
            j+=1
            if j>=argc: usage(sys.argv[0])
            by_expr = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-by-group":
            by_groups = True
            j+=1
            continue
        if sys.argv[j]=="-by-submitter":
            by_submitters = True
            j+=1
            continue
        if sys.argv[j]=="-constraint":
            j+=1
            if j>=argc: usage(sys.argv[0])
            constraint = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-cum":
            cum_plots = True
            j+=1
            continue
        if sys.argv[j]=="-with-total":
            with_total = True
            j+=1
            continue
        if sys.argv[j]=="-only-total":
            only_total = True
            j+=1
            continue
        if sys.argv[j]=="-ratios":
            ratio_plots = True
            j+=1
            continue
        if sys.argv[j]=="-timeslice":
            j+=1
            if j>=argc: usage(sys.argv[0])
            timeslice = int(sys.argv[j])
            j+=1
            continue
        if sys.argv[j]=="-ignore":
            j+=1
            opargs = 0
            while (j < argc) and (sys.argv[j][:1] != '-'):
                ignore.append(sys.argv[j])
                j += 1
                opargs += 1
            if opargs < 1: usage(sys.argv[0])
            continue
        if sys.argv[j]=="-only":
            j+=1
            opargs = 0
            while (j < argc) and (sys.argv[j][:1] != '-'):
                only.append(sys.argv[j])
                j += 1
                opargs += 1
            if opargs < 1: usage(sys.argv[0])
            continue
        usage(argv[0])
except SystemExit:
    raise
except:
    usage(argv[0])


def fill_cum_map(in_file, by_groups=False, by_submitters=False, cum_plots=False, ratio_plots=False, timeslice=1, ignore=[], only=[]):
    cum_map = {}
    cum_map[""] = []
    first = True
    t0 = 0
    cur_ag = ""
    line_num = 0
    for ln in in_file:
        line_num += 1
        raw_ln = ln
        ln = ln.strip('\r\n')
        t = ln.split()

        if (len(t) < 4): continue

        # job status
        jstat = int(t[2])

        # keep track of most recent accounting group mentioned
        if jstat != 4:
            cur_ag = '*incomplete*'
        elif (by_groups or by_submitters):
            cur_ag = t[3].strip('"')
            if by_groups:
                j = cur_ag.rfind('.')
                if (j>=0): cur_ag = cur_ag[:j]
        else:
            cur_ag = t[3].strip('"')

        if (len(only)>0) and not (cur_ag in only): continue
        elif (len(ignore)>0) and (cur_ag in ignore): continue

        # time
        if jstat == 4: tcur = int(t[0])
        else:          tcur = int(t[1])

        # determine zero-time
        if first:
            t0 = tcur
            first = False

        if tcur < t0:
            sys.stderr.write("Warning: skipping out-of-order timestamp line %d of input:\n" % (line_num))
            sys.stderr.write("%s\n" % (raw_ln))
            continue

        # translate time stamps to zero-based from t0
        tcur -= t0
        tcur /= timeslice
        tcur *= timeslice

        # encountered a new acct grp -- fill in its previous time stamps
        if (not cum_map.has_key(cur_ag)):
            cum_map[cur_ag] = [[x[0], 0] for x in cum_map[""]]

        for ag in cum_map.keys():
            if ag in ["", cur_ag]: d = 1
            else: d = 0
            if (len(cum_map[ag]) > 0) and (cum_map[ag][-1][0] == tcur):
                cum_map[ag][-1][1] += d
            else:
                cum_map[ag].append([tcur, d])

    # get cum counts
    if cum_plots:
        for ag in cum_map.keys():
            for j in xrange(1, len(cum_map[ag])):
                cum_map[ag][j][1] += cum_map[ag][j-1][1]

    # normalize
    if ratio_plots:
        for j in xrange(0, len(cum_map[""])):
            for ag in cum_map.keys():
                if ag != "": cum_map[ag][j][1] = float(cum_map[ag][j][1]) / float(cum_map[""][j][1])

    cum_map["*total*"] = cum_map[""]
    del cum_map[""]

    return cum_map


# temp file for condor_history output
ho_fname = tempfile.mktemp(prefix="ppt_")
ho_file = open(ho_fname, "w")

# construct condor_history command
chc = ['condor_history']
if in_fname != None: chc.extend(['-f', in_fname])
chc.extend(['-format', '%s', 'CompletionDate'])
chc.extend(['-format', ' %s', 'EnteredCurrentStatus'])
chc.extend(['-format', ' %s', 'JobStatus'])
if by_groups or by_submitters:
    chc.extend(['-format', ' %s\n', 'ifThenElse(AccountingGroup=!=UNDEFINED, AccountingGroup, "*none*"'])
elif by_expr != None:
    chc.extend(['-format', ' %s\n', 'ifThenElse((%s)=!=UNDEFINED, (%s), "*undef*"' % (by_expr, by_expr)])
else:
    chc.extend(['-format', ' %s\n', 'ifThenElse(X=!=UNDEFINED, "***", "***"'])
    only_total = True
    ignore.append('*incomplete*')

if constraint != None:
    chc.extend(['-constraint', constraint])

# invoke condor_history to generate our desired output
subprocess.call(chc, stdout=ho_file)
ho_file.close()

# read the output of condor_history command and generate map of cumulative acct grp ratios
ho_file = open(ho_fname, "r")
cum_map = fill_cum_map(ho_file, by_groups=by_groups, by_submitters=by_submitters, cum_plots=cum_plots, ratio_plots=ratio_plots, timeslice=timeslice, ignore=ignore, only=only)

keys = cum_map.keys()
keys.sort()

xlab = "Time (sec)"
ylab = "thruput"
title = "thruput"
if cum_plots:
    ylab = "Cumulative " + ylab
    title = "Cumulative " + title
if ratio_plots:
    ylab = ylab + " ratios"
    title = title + " ratios"
title = title + " vs Time"

fig = pyplot.figure()
ax = fig.add_subplot(111)

legkeys = []
for k in keys:
    if k == "***": continue
    if only_total:
        if (k != "*total*"): continue
    elif (not with_total):
        if (k == "*total*"): continue
    plt = ax.plot([x[0] for x in cum_map[k]], [x[1] for x in cum_map[k]])
    legkeys.append(k)

ax.set_xlabel(xlab)
ax.set_ylabel(ylab)
ax.set_title(title)
ax.legend(legkeys)
pyplot.show()
