#!/usr/bin/python


import sys, os, os.path, string, glob, math
import time, datetime
import tempfile
import subprocess
import argparse

import argparse_extensions


argparser = argparse.ArgumentParser()
argparser.add_argument('-f', dest='in_fname', metavar='<history-file>', default=None, help='def= current condor histor file')

mxgroup = argparser.add_mutually_exclusive_group()
mxgroup.add_argument('-by', dest='by_expr', default=None, metavar='<expr>', help='categories by value of <expr>')
mxgroup.add_argument('-by-group', dest='by_groups', action='store_true', default=False, help='categories by acct groups')
mxgroup.add_argument('-by-submitter', dest='by_submitters', action='store_true', default=False, help='categories by submitter')

mxgroup = argparser.add_mutually_exclusive_group()
mxgroup.add_argument('-ignore', dest='ignore', nargs='+', default=[], metavar='<cat>')
mxgroup.add_argument('-only', dest='only', nargs='+', default=[], metavar='<cat>')

argparser.add_argument('-constraint', dest='constraint', default=None, metavar='<expr>')
argparser.add_argument('-cum', dest='cum_plots', action='store_true', default=False, help='cumulative plots')

mxgroup = argparser.add_mutually_exclusive_group()
mxgroup.add_argument('-with-total', dest='with_total', action='store_true', default=False, help='include total in plot')
mxgroup.add_argument('-only-total', dest='only_total', action='store_true', default=False, help='only total in plot')

mxgroup = argparser.add_mutually_exclusive_group()
mxgroup.add_argument('-ratios', dest='ratio_plots', action='store_true', default=False, help='plot ratios relative to totals')
mxgroup.add_argument('-rate', dest='rate_plots', action='store_true', default=False, help='plot rate: jobs/time')

argparser.add_argument('-timeslice', dest='timeslice', type=int, default=1, metavar='<seconds>', help='def= 1 sec')
argparser.add_argument('-since', dest='since', action=argparse_extensions.time_arg_parser, default=None, metavar='<time-expr>', help='ex: "1294696760", "10 min ago", "1h", "2010/12/31", "2010/12/31 15:30:00"')
argparser.add_argument('-until', dest='until', action=argparse_extensions.time_arg_parser, default=None, metavar='<time-expr>')
argparser.add_argument('-data', dest='data', nargs='?', type=argparse.FileType('w'), default=None, const=sys.stdout, metavar='<filename>', help='def= stdout')
argparser.add_argument('-noplot', dest='doplot', action='store_false', default=True, help='no graphic plot (data only)')
argparser.add_argument('-submissions', action='store_true', default=False, help='plot job submissions instead of completions')
argparser.add_argument('-hof', default=None, metavar='<filename>', help='use <filename> for precomputed history output')
argparser.add_argument('-hof-out', default=None, metavar='<filename>', help='save history output to <filename>')
argparser.add_argument('-echo', action='store_true', default=False, help='echo condor history command used')

args = argparser.parse_args()

if args.doplot:
    # I won't require these unless we're plotting
    import matplotlib.pyplot as pyplot
    import numpy

if (not args.doplot) and (args.data == None): args.data = sys.stdout

if not (args.by_groups or args.by_submitters or args.by_expr):
    args.only_total = True
    if not args.submissions: args.ignore.append('*incomplete*')


def fill_cum_map(in_file, by_groups=False, by_submitters=False, cum_plots=False, ratio_plots=False, rate_plots=False, timeslice=1, ignore=[], only=[], since=None, until=None, submissions=False):
    cum_map = {}
    cum_map[""] = []
    first = True
    t0 = 0
    cur_ag = ""
    line_num = 0
    for ln in in_file:
        line_num += 1
        raw_ln = ln
        ln = ln.strip(' \t\r\n')
        t = ln.split()

        if t[0] == '***': continue
        if (len(t) < 4): continue

        # job status
        jstat = int(t[2])

        # assign a grouping value
        if (jstat != 4) and not submissions:
            cur_ag = '*incomplete*'
        elif (by_groups or by_submitters):
            cur_ag = t[3].strip('"')
            if by_groups:
                j = cur_ag.rfind('.')
                if (j>=0): cur_ag = cur_ag[:j]
        else:
            cur_ag = t[3].strip('"')

        if (len(only)>0) and not (cur_ag in only): continue
        elif (len(ignore)>0) and (cur_ag in ignore): continue

        # time
        if (jstat == 4) or submissions: tcur = int(t[0])
        else:                           tcur = int(t[1])

        # skip any data outside specified time range
        if (since != None) and (tcur < since): continue
        if (until != None) and (tcur > until): continue

        # determine zero-time
        if first:
            t0 = tcur
            first = False

        if tcur < t0:
            sys.stderr.write("Warning: skipping out-of-order timestamp line %d of input:\n" % (line_num))
            sys.stderr.write("%s\n" % (raw_ln))
            continue

        # translate time stamps to zero-based from t0
        tcur -= t0
        tcur /= timeslice
        tcur *= timeslice

        # encountered a new acct grp -- fill in its previous time stamps
        if (not cum_map.has_key(cur_ag)):
            cum_map[cur_ag] = [[x[0], 0] for x in cum_map[""]]

        for ag in cum_map.keys():
            if ag in ["", cur_ag]: d = 1
            else: d = 0
            if (len(cum_map[ag]) > 0) and (cum_map[ag][-1][0] == tcur):
                cum_map[ag][-1][1] += d
            else:
                cum_map[ag].append([tcur, d])

    # get cum counts
    if cum_plots:
        for ag in cum_map.keys():
            for j in xrange(1, len(cum_map[ag])):
                cum_map[ag][j][1] += cum_map[ag][j-1][1]

    # normalize
    if rate_plots:
        for j in xrange(0, len(cum_map[""])):
            if cum_plots:
                for ag in cum_map.keys():
                    cum_map[ag][j][1] = float(cum_map[ag][j][1]) / float(timeslice+cum_map[ag][j][0])
            else:
                for ag in cum_map.keys():
                    cum_map[ag][j][1] = float(cum_map[ag][j][1]) / float(timeslice)
    elif ratio_plots:
        for j in xrange(0, len(cum_map[""])):
            for ag in cum_map.keys():
                if ag != "": cum_map[ag][j][1] = float(cum_map[ag][j][1]) / float(cum_map[""][j][1])
            cum_map[""][j][1] = 1.0

    cum_map["*total*"] = cum_map[""]
    del cum_map[""]

    return cum_map


if args.hof is not None:
    # use precomputed history output file if requested
    ho_file = open(args.hof, "r")
else:
    # temp file for condor_history output
    ho_fname = tempfile.mktemp(prefix="ppt_")
    ho_file = open(ho_fname, "w")

    # construct condor_history command
    chc = ['condor_history']

    if args.in_fname != None: chc.extend(['-f', args.in_fname])

    if args.submissions: chc.extend(['-format', '%s', 'QDate'])
    else:                chc.extend(['-format', '%s', 'CompletionDate'])

    chc.extend(['-format', ' %s', 'EnteredCurrentStatus'])
    chc.extend(['-format', ' %s', 'JobStatus'])

    if args.by_groups or args.by_submitters:
        chc.extend(['-format', ' %s\n', 'ifThenElse(AccountingGroup=!=UNDEFINED, AccountingGroup, "*none*")'])
    elif args.by_expr != None:
        chc.extend(['-format', ' %s\n', 'ifThenElse((%s)=!=UNDEFINED, (%s), "*undef*")' % (args.by_expr, args.by_expr)])
    else:
        chc.extend(['-format', ' ***\n', 'X'])

    if args.constraint != None:
        chc.extend(['-constraint', args.constraint])

    if args.echo:
        tchc = [chc[0]] + ['\'%s\''%(x) for x in chc[1:]]
        sys.stdout.write("%s\n" % ((" ".join(tchc)).replace('\n','\\n')))

    # invoke condor_history to generate our desired output
    subprocess.call(chc, stdout=ho_file)
    ho_file.close()

    if args.hof_out is not None:
        hos_fname = args.hof_out
    else:
        hos_fname = "%s_sort"%(ho_fname)

    subprocess.call(["sort", "-n", "-o", hos_fname, ho_fname])

    # read the output of condor_history command and generate map of cumulative acct grp ratios
    ho_file = open(hos_fname, "r")


cum_map = fill_cum_map(ho_file, by_groups=args.by_groups, by_submitters=args.by_submitters, cum_plots=args.cum_plots, ratio_plots=args.ratio_plots, rate_plots=args.rate_plots, timeslice=args.timeslice, ignore=args.ignore, only=args.only, since=args.since, until=args.until, submissions=args.submissions)


keys = cum_map.keys()
keys.sort()

if args.doplot:
    xlab = "Time (sec)"
    ylab = "thruput"
    title = "thruput"
    if args.cum_plots:
        ylab = "Cumulative " + ylab
        title = "Cumulative " + title
    if args.ratio_plots:
        ylab = ylab + " ratios"
        title = title + " ratios"
    title = title + " vs Time"

    fig = pyplot.figure()
    ax = fig.add_subplot(111)


legkeys = []
data = []


if args.data != None:
    dd = ["time"] 
    dd += [x[0] for x in cum_map[keys[0]]]
    data += [dd]


for k in keys:
    if k == "***": continue
    if args.only_total:
        if (k != "*total*"): continue
    elif (not args.with_total):
        if (k == "*total*"): continue
    xx = [x[0] for x in cum_map[k]]
    yy = [x[1] for x in cum_map[k]]
    if args.doplot: plt = ax.plot(xx, yy)
    legkeys.append(k)
    if args.data != None:
        dd = [k]
        dd += yy
        data += [dd]


# do this before plot call below, so it isn't delayed
if args.data != None:
    r = len(data[0])
    c = len(data)
    for j in xrange(r):
        row = "\t".join(["%s"%(data[k][j]) for k in xrange(c)])
        args.data.write("%s\n"%(row))


if args.doplot:
    ax.set_xlabel(xlab)
    ax.set_ylabel(ylab)
    ax.set_title(title)
    ax.legend(legkeys)
    pyplot.show()


