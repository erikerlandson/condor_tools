#!/bin/env ruby

# gem install trollop
require 'trollop'

# gem install simple-random
require 'simple-random'

# gem install narray
require 'narray'


class Distribution
    def initialize
        @rng = SimpleRandom.new
        @rng.set_seed(Time.now)
    end

    def sample(*n)
        case
        when n.length < 1
            return _sample
        when (n.length == 1 and n[0].class <= Integer)
            r = []
            n[0].times { r << _sample }
            return r
        else
            raise "bad args"
        end
    end
end

class GaussianDist < Distribution
    def initialize(mean, stdv)
        @mean = mean
        @stdv = stdv
        super()
    end
    def _sample
        return @rng.normal(@mean, @stdv)
    end
end

class UniformDist < Distribution
    def initialize(mean, stdv)
        # http://en.wikipedia.org/wiki/Uniform_distribution_%28continuous%29
        @a = mean - stdv*Math.sqrt(3.0)
        @b = mean + stdv*Math.sqrt(3.0)
        super()
    end
    def _sample
        return @rng.uniform(@a, @b)
    end
end

class LogNormal < Distribution
    def initialize(mean, stdv)
        # http://en.wikipedia.org/wiki/Log-normal_distribution
        @sigma = Math.sqrt(Math.log(1.0 + (stdv**2 / (mean**2))))
        @mu = Math.log(mean) - 0.5*@sigma**2
        super()
    end
    def _sample
        return @rng.log_normal(@mu, @sigma)
    end
end


def random_variable(distribution, mean, stdv)
    case distribution.downcase
        when "gaussian", "normal"
            rv = GaussianDist.new(mean, stdv)
        when "uniform"
            rv = UniformDist.new(mean, stdv)
        when "lognormal", "log-normal", "log_normal"
            rv = LogNormal.new(mean, stdv)
        else
            Trollop::die(:distribution, "  Invalid distribution value %s" % [opts[distribution]])
    end
    return rv
end


opts = Trollop::options do
    opt :distribution, "random variable distribution", :type => :string, :required => true
    opt :trials, "number of trials", :type => :int, :required => true
    opt :mean, "random variable mean", :type => :floats, :required => true
    opt :stdv, "random variable standard deviation", :type => :floats, :required => true
    opt :period, "negotiator cycle period", :type => :ints, :required => true
end


print "mean\tstdv\tperiod\tmod_mean\tmod_stdv\n"
opts[:mean].each do |mean|
    opts[:stdv].each do |stdv|
        opts[:period].each do |period|
            rv = random_variable(opts[:distribution], mean, stdv)
            data = NArray.to_na(rv.sample(opts[:trials])) % period
            print "%s\t%s\t%s\t%s\t%s\n" % [mean, stdv, period, data.mean, data.stddev]
        end
    end
end
