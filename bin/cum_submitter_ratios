#!/usr/bin/python


import sys, os, os.path, string, glob, math
import random
import time, datetime
import tempfile
import subprocess
import matplotlib.pyplot as pyplot
import numpy


def usage(a):
    sys.stderr.write("usage: %s [options]\n")
    sys.stderr.write("       [ -in <input-file> ] (def = stdin)\n")
    sys.stderr.write("       [ -out <output-file> ] (def = stdout)\n")
    sys.stderr.write("       [ -cum-groups ] (def = use full submitter names)\n") 
    sys.exit(1)

argv = sys.argv
argc = len(argv)

fixedArgs = 0
if argc <= fixedArgs: usage(argv[0])

# fixed args

# option defaults
in_fname = None
out_fname = None
cum_groups = False

# options
try:
    j = fixedArgs+1
    while j<argc:
        if sys.argv[j]=="-h": usage()
        if sys.argv[j]=="-in":
            j+=1
            if j>=argc: usage(sys.argv[0])
            in_fname = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-out":
            j+=1
            if j>=argc: usage(sys.argv[0])
            out_fname = sys.argv[j]
            j+=1
            continue
        if sys.argv[j]=="-cum-groups":
            cum_groups = True
            j+=1
            continue
        usage(argv[0])
except SystemExit:
    raise
except:
    usage(argv[0])


def fill_cum_map(in_file, cum_groups=False):
    cum_map = {}
    cum_map[""] = []
    first = True
    t0 = 0
    tz = 0
    cur_ag = None
    for ln in in_file:
        ln = ln.strip('\r\n')
        t = ln.split()

        if (len(t) < 1): continue

        # keep track of most recent accounting group mentioned
        if ((t[0] == "AccountingGroup") and (len(t) == 3)):
            cur_ag = t[2].strip('"')
            if cum_groups:
                j = cur_ag.rfind('.')
                if (j>=0): cur_ag = cur_ag[:j]
            continue

        # filter out lines we aren't interested in
        if not ((t[0] == "***") and (len(t) == 16) and (t[13] == "CompletionDate")): continue

        # time
        tcur = int(t[15])

        # determine zero-time
        if first:
            t0 = tcur
            first = False

        # translate time stamps to zero-based from t0
        tcur -= t0

        # encountered a new acct grp -- fill in its previous time stamps
        if not cum_map.has_key(cur_ag):
            cum_map[cur_ag] = [[x[0], 0] for x in cum_map[""]]

        for ag in cum_map.keys():
            if ag in ["", cur_ag]: d = 1
            else: d = 0
            if (len(cum_map[ag]) > 0) and (cum_map[ag][-1][0] == tcur):
                cum_map[ag][-1][1] += d
            else:
                cum_map[ag].append([tcur, d])

    # get cum counts
    for ag in cum_map.keys():
        for j in xrange(1, len(cum_map[ag])):
            cum_map[ag][j][1] += cum_map[ag][j-1][1]

    # normalize
    for j in xrange(0, len(cum_map[""])):
        for ag in cum_map.keys():
            if ag != "": cum_map[ag][j][1] = float(cum_map[ag][j][1]) / float(cum_map[""][j][1])

    # don't need this anymore
    del cum_map[""]

    return cum_map


# open files, if needed
if in_fname == None: in_file = sys.stdin
else: in_file = open(in_fname, "r")

if out_fname == None: out_file = sys.stdout
else: out_file = open(out_fname, "w")

# read the input history file and generate map of cumulative acct grp ratios
cum_map = fill_cum_map(in_file, cum_groups = cum_groups)

keys = cum_map.keys()
keys.sort()

fig = pyplot.figure()
ax = fig.add_subplot(111)
for k in keys:
    plt = ax.plot([x[0] for x in cum_map[k]], [x[1] for x in cum_map[k]])
ax.set_xlabel("Time (sec)")
ax.set_ylabel("Cum fractional share")
ax.set_title("Cumulative fractional share as function of time")
ax.legend(keys)
pyplot.show()
