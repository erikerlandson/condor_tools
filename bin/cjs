#!/usr/bin/python

import sys, os, os.path, string, glob, math
import random
import time
import tempfile
import subprocess
import argparse


argparser = argparse.ArgumentParser()
argparser.add_argument('-duration', dest='duration', type=int, default=60, metavar='<seconds>', help='job duration')
argparser.add_argument('-maxduration', type=int, default=None, metavar='<seconds>', help='maximum job duration (range)')
argparser.add_argument('-n', dest='n', type=int, default=1, metavar='<num-jobs>')
argparser.add_argument('-submitters', dest='submitters', type=int, default=1, metavar='<num-submitters>')
argparser.add_argument('-xgroups', dest='xgroups_args', default=[], nargs='*', metavar='<grp> <num>')
argparser.add_argument('-xsubmitters', dest='xsubmitters_args', default=[], nargs='*', metavar='<submitter> <num>')
argparser.add_argument('-reqs', dest='reqs', default=None, metavar='<expr>', help='job requirement expression')
argparser.add_argument('-shell', dest='shell', action='store_true', default=False, help='wrap sleep in shell command')
argparser.add_argument('-err', dest='err_out', action='store_true', default=False, help='collect stderr from jobs')
argparser.add_argument('-std', dest='std_out', action='store_true', default=False, help='collect stdout from jobs')
argparser.add_argument('-log', dest='log_out', action='store_true', default=False, help='collect log from jobs')
argparser.add_argument('-ss', dest='ss', action='store_true', default=False, help='submit in steady-state mode')
argparser.add_argument('-ss-maxreps', dest='maxreps', default=None, type=int, metavar='<reps>')
argparser.add_argument('-ss-maxtime', dest='maxtime', default=None, type=float, metavar='<seconds>')
argparser.add_argument('-ss-interval', dest='interval', default=0, type=float, metavar='<seconds>')
argparser.add_argument('-append', dest='append', default=[], action='append', metavar='<submit-line>')
argparser.add_argument('-remote', default=None, metavar='<schedd-name>')
argparser.add_argument('-name', default=None, metavar='<schedd-name>')
argparser.add_argument('-dir', default=None, metavar='<directory>', help='place working data/dirs in <directory>')
argparser.add_argument('-vs', action='store_true', default=False, help='verbose submit')

args = argparser.parse_args()

xgroups = None
if len(args.xgroups_args) > 0:
    try:
        xgroups = {}
        j=0
        while ((j+1) < len(args.xgroups_args)):
            tn = int(args.xgroups_args[j+1])
            xgroups[args.xgroups_args[j]] = tn
            j += 2
        if j < len(args.xgroups_args):
            raise Exception()
    except:
        argparser.print_usage()
        sys.exit(1)

xsubmitters = None
if len(args.xsubmitters_args) > 0:
    try:
        xsubmitters = {}
        j=0
        while ((j+1) < len(args.xsubmitters_args)):
            tn = int(args.xsubmitters_args[j+1])
            xsubmitters[args.xsubmitters_args[j]] = tn
            j += 2
        if j < len(args.xsubmitters_args):
            raise Exception()
    except:
        argparser.print_usage()
        sys.exit(1)


shcmd = ""
if args.shell:
    cpath = sys.argv[0]
    j = cpath.rfind('/')
    if j>=0: cpath = cpath[:j]
    else:    cpath = "."
    shcmd = "%s/shcmd" % (cpath)
    if not os.path.exists(shcmd):
        print "Could not find %s" % (shcmd)
        sys.exit(1)

if args.dir is None: jsub_dir = tempfile.mkdtemp(prefix='cjs_jsub_')
else:                jsub_dir = tempfile.mkdtemp(prefix='cjs_jsub_', dir=args.dir)

print "using temp dir %s for jsub files" % (jsub_dir)

# open a temporary submission file
jsfile_name = "%s/cjs.jsub" % (jsub_dir)
print "preparing %d jobs in submission file: %s" % (args.n, jsfile_name)
jsfile = open(jsfile_name, 'wb')

# jsub "header" stuff
jsfile.write("universe = vanilla\n")

jobdur = "%d"%(args.duration)
if args.maxduration is not None:
    jobdur = "$$([%d + random(%d)])" % (args.duration, 1+args.maxduration-args.duration)

if args.shell:
    jsfile.write("cmd = %s\n" % (shcmd))
    jsfile.write("args = /bin/sleep %s\n" % (jobdur))
else:
    jsfile.write("cmd = /bin/sleep\n")
    jsfile.write("args = %s\n" % (jobdur))

if args.std_out:
    jsfile.write("output = %s/std.$(cluster).$(process)\n" % (jsub_dir))
if args.err_out:
    jsfile.write("error = %s/err.$(cluster).$(process)\n" % (jsub_dir))
if args.log_out:
    jsfile.write("log = %s/log.$(cluster).$(process)\n" % (jsub_dir))

jsfile.write("should_transfer_files = if_needed\n")
jsfile.write("when_to_transfer_output = on_exit\n")

if args.reqs != None:
    jsfile.write("requirements = (%s)\n" % (args.reqs))

for aline in args.append:
    jsfile.write("%s\n" % (aline))

nsub = 0

if xsubmitters != None:
    # construct using the submitter names and counts given in '-xsubmitters'
    nsub = 0
    for k in xsubmitters.keys():
        gn = xsubmitters[k]
        jsfile.write("+AccountingGroup=\"%s\"\n" % (k))
        jsfile.write("queue %d\n" % (gn))
        nsub += gn
elif xgroups != None:
    # construct using the groups and counts given in '-xgroups'
    nsub = 0
    for k in xgroups.keys():
        gn = xgroups[k]
        jsfile.write("+AccountingGroup=\"%s.user\"\n" % (k))
        jsfile.write("queue %d\n" % (gn))
        nsub += gn
else:
    # construct using (n) and (submitters)
    u_inc = float(args.n)/float(args.submitters)
    u_sum = 0.0
    u_max = float(args.n)
    u_cnt = 0
    u = 0
    j = 0
    while j < args.submitters:
        u_sum += u_inc
        u = int(u_sum)
        u_sum -= float(u)

        # Handle corner cases from roundoff err.
        # Correction shouldn't actually exceed 1
        u_cnt += u
        if (j == (args.submitters-1)) and (u_cnt < args.n):
            d = args.n-u_cnt
            u += d
            u_cnt += d

        jsfile.write("+AccountingGroup = \"%s\"\n" % ("none.user%04d" % j))
        jsfile.write("queue %d\n" % (u))
        j += 1
    nsub = u_cnt

jsfile.close()


# build the submit command
subcmd = ["condor_submit"]
if args.vs: subcmd += ["-verbose"]
if args.name is not None: subcmd += ["-name", args.name]
if args.remote is not None: subcmd += ["-remote", args.remote]
subcmd += [jsfile_name]


if not args.ss:
    print "submitting %d jobs via jsub file %s" % (nsub, jsfile_name)
    # submit the file
    rc = subprocess.call(subcmd)
    if rc == 0:
        print "submit was successful"
    else:
        print "WARNING! submit failed with code %d" % rc
else:
    # steady-state submission mode
    reps = 0
    t0 = float(time.time())
    tL = t0
    elapsed = 0.0
    ssub = 0
    while True:
        rc = subprocess.call(subcmd)
        tt = time.time()
        dt = time.strftime("%Y/%m/%d %H:%M:%S")
        if rc != 0:
            res = "FAIL"
        else:
            ssub += 1
            res = "succ"

        elapsedL = elapsed
        elapsed = float(tt) - t0
        reps += 1
        sys.stdout.flush()
        sys.stdout.write("\nsubmission rep= %6d  elapsed= %8.2f  ssub= %6d  tdelta= %5.2f  res= %s  ts= %s\n" % (reps, elapsed, ssub, elapsed-elapsedL, res, dt))
        sys.stdout.flush()

        if (args.maxreps != None) and (reps >= args.maxreps): break
        if (args.maxtime != None) and (elapsed >= args.maxtime): break

        tC = float(time.time())
        tS = args.interval - (tC-tL)
        if tS > 0: time.sleep(tS)
        tL = float(time.time())
